name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-upload-url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -z "$LAST_TAG" ]]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build production assets
        run: |
          npm run build
          npm run analyze:bundle
          
      - name: Create release archive
        run: |
          tar -czf portfolio-${{ steps.version.outputs.version }}.tar.gz \
            .next/ \
            public/ \
            package.json \
            next.config.js \
            README.md

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            # Clone the repository
            git clone https://github.com/yourusername/portfolio.git
            cd portfolio
            
            # Checkout this version
            git checkout ${{ steps.version.outputs.version }}
            
            # Install dependencies
            npm install
            
            # Build and start
            npm run build
            npm start
            ```
            
            ## What's Changed
            - See commit history for detailed changes
            - Performance improvements and bug fixes
            - Updated dependencies
            
            ## Technical Details
            - Node.js 18+ required
            - Built with Next.js
            - Includes TypeScript definitions
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.last-tag.outputs.tag }}...${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./portfolio-${{ steps.version.outputs.version }}.tar.gz
          asset_name: portfolio-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  deploy-release:
    runs-on: ubuntu-latest
    name: Deploy Release
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Create deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ðŸŽ‰ New release ${{ needs.create-release.outputs.version }} deployed!
            
            ðŸ”— Production: https://yoursite.com
            ðŸ“¦ Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-release:
    runs-on: ubuntu-latest
    name: Post Release Tasks
    needs: [create-release, deploy-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update package version
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ github.event.inputs.version }}" || exit 0
          git push

      - name: Trigger documentation update
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: docs-update
          client-payload: '{"version": "${{ needs.create-release.outputs.version }}"}'