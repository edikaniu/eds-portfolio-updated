name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm test
        
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT
          
      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Deploy Preview')
            );
            
            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
            const commentBody = `## üöÄ Deploy Preview
            
            **Preview URL**: ${previewUrl}
            
            ### Test the deployment:
            - üè† [Homepage](${previewUrl})
            - üîß [Admin Panel](${previewUrl}/admin)
            - üíì [Health Check](${previewUrl}/api/health)
            - üìä [System Status](${previewUrl}/api/health/detailed)
            
            <!--deploy-preview-comment-->`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.production_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT
          
      - name: Post-deployment health check
        run: |
          sleep 30  # Wait for deployment to be fully ready
          curl -f ${{ steps.deploy.outputs.production_url }}/api/health || exit 1
          echo "‚úÖ Health check passed"
          
      - name: Run database migrations
        if: success()
        run: |
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Create deployment notification
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'Successfully deployed to production',
              context: 'vercel/deployment'
            });
            
            // Create a release if this is a tagged commit
            if (context.ref.startsWith('refs/tags/')) {
              const tagName = context.ref.replace('refs/tags/', '');
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: `üöÄ Deployed to production: ${{ steps.deploy.outputs.production_url }}\n\n` +
                      `### What's included:\n` +
                      `- Latest application updates\n` +
                      `- Database migrations\n` +
                      `- Performance optimizations\n` +
                      `- Security updates`,
                draft: false,
                prerelease: false
              });
            }

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.deploy-production.result == 'success' || needs.deploy-preview.result == 'success' }}
        run: |
          echo "‚úÖ Deployment completed successfully!"
          
      - name: Notify failure
        if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-preview.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          exit 1